name: Deploy to GKE

on:
  push:
    branches:
      - main # Or your default branch

env:
  GCP_PROJECT_ID: aremko-e51ae
  GCP_REGION: southamerica-west1
  GKE_CLUSTER_NAME: devagent-gke
  GCR_HOSTNAME: gcr.io # Or your Artifact Registry hostname e.g. southamerica-west1-docker.pkg.dev
  GAR_REPOSITORY_API: devagent-api # If using GAR, this is the repo name, not part of the image name
  GAR_REPOSITORY_UI: devagent-ui   # If using GAR
  IMAGE_API: devagent-api
  IMAGE_UI: devagent-ui
  HELM_RELEASE_NAME: devagent
  HELM_NAMESPACE: devagent

permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get GitHub OIDC Token and Decode Claims
        id: get_oidc_token
        run: |
          token=$(curl -sSL "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=gcp-cicd" -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN")
          echo "OIDC Token: $token"
          echo "::set-output name=oidc_token::$token"
          echo "Decoding OIDC Token Claims:"
          echo $token | cut -d. -f2 | base64 --decode | jq .

      - name: Authenticate to Google Cloud
        id: auth # Give the auth step an id to reference its outputs if needed elsewhere
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: 'projects/828573473542/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider'
          service_account: 'github-actions-cicd@aremko-e51ae.iam.gserviceaccount.com'
          # id_token: ${{ steps.get_oidc_token.outputs.oidc_token }} # Optionally pass the fetched token if needed for direct use

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER_NAME }}
          location: ${{ env.GCP_REGION }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Login to GCR
        run: |-
          gcloud auth configure-docker ${{ env.GCR_HOSTNAME }} --quiet
        # Old docker/login-action method, configure-docker is preferred for GCR
        # uses: docker/login-action@v2
        # with:
        #   registry: ${{ env.GCR_HOSTNAME }}
        #   username: oauth2accesstoken
        #   password: $(gcloud auth print-access-token)

      - name: Build and push API image
        run: |-
          docker build -t ${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_API }}:${{ github.sha }} -f ./devagent-api/Dockerfile ./devagent-api
          docker push ${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_API }}:${{ github.sha }}
        # working-directory: ${{ github.workspace }} # Assumes Dockerfile is in ./devagent-api relative to root

      - name: Build and push UI image
        run: |-
          docker build -t ${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_UI }}:${{ github.sha }} -f ./devagent-ui/Dockerfile ./devagent-ui
          docker push ${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_UI }}:${{ github.sha }}
        # working-directory: ${{ github.workspace }} # Assumes Dockerfile is in ./devagent-ui relative to root

      - name: Deploy Helm chart
        run: |-
          helm upgrade --install ${{ env.HELM_RELEASE_NAME }} ./helm/thefullstackagent \
            --namespace ${{ env.HELM_NAMESPACE }} \
            --create-namespace \
            -f ./helm/thefullstackagent/values-gcp.yaml \
            --set devagentApi.image.repository=${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_API }} \
            --set devagentUi.image.repository=${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_UI }} \
            --set devagentApi.image.tag=${{ github.sha }} \
            --set devagentUi.image.tag=${{ github.sha }} 