networks:
  agentprovision-network:
    driver: bridge

services:
  agentprovision-ui:
    build:
      context: ./agentprovision-ui
      dockerfile: Dockerfile
      args:
        VITE_API_URL: /api/v1
    ports:
      - "3000:80"
    networks:
      - agentprovision-network
    depends_on:
      - agentprovision

  agentprovision:
    build:
      context: ./agentprovision
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    volumes:
      - .:/app
      - ./data:/app/data
    environment:
      - DEBUG=True
      - LOG_LEVEL=INFO
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/AgentProvision
      - REDIS_URL=redis://redis:6379/0
      - PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_URL=http://grafana:3000
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    networks:
      - agentprovision-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      prometheus:
        condition: service_started
      grafana:
        condition: service_started
    command: uvicorn agentprovision.api.main:app --host 0.0.0.0 --port 8000 --reload

  postgres:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=AgentProvision
    ports:
      - "5433:5432"
    networks:
      - agentprovision-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - agentprovision-network
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@AgentProvision.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    networks:
      - agentprovision-network
    depends_on:
      - postgres

  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - agentprovision-network
    depends_on:
      alertmanager:
        condition: service_healthy

  grafana:
    image: grafana/grafana:10.0.0
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    networks:
      - agentprovision-network
    depends_on:
      - prometheus

  test:
    build:
      context: ./agentprovision
      dockerfile: Dockerfile
    volumes:
      - .:/app
    environment:
      - TESTING=True
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/AgentProvision
      - ALLOWED_ORIGINS_ENV=http://testserver # Use _ENV suffix
      - BACKEND_CORS_ORIGINS_ENV=http://testserver # Use _ENV suffix
    networks:
      - agentprovision-network
    depends_on:
      - postgres
    command: ["pytest", "-v", "--cov=agentprovision", "agentprovision/tests/"]

  lint:
    build:
      context: ./agentprovision
      dockerfile: Dockerfile
    volumes:
      - .:/app
    networks:
      - agentprovision-network
    command: ["sh", "-c", "autopep8 --in-place --recursive . && black . && isort . && flake8 . && mypy ."]

  node-exporter:
    image: prom/node-exporter:v1.6.1
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - agentprovision-network
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($|/)'

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - agentprovision-network

  alertmanager:
    image: prom/alertmanager:v0.25.0
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
    networks:
      - agentprovision-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/ready"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
